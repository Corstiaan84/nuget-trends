name: Scheduler
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  # SENTRY_LOG_LEVEL: "debug"
  IMAGE_NAME: nugettrends.scheduler
  IMAGE_TAGS: ${{ github.sha }}
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}
on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
    paths:
      - 'src/NuGetTrends.Scheduler/**'
      - 'src/NuGetTrends.Data/**'
      - 'src/NuGet.Protocol.Catalog/**'
      - 'src/Directory.Build.props'
      - '**/scheduler-workflow.yml'
  pull_request:
    paths:
      - 'src/NuGetTrends.Scheduler/**'
      - 'src/NuGetTrends.Data/**'
      - 'src/NuGet.Protocol.Catalog/**'
      - 'src/Directory.Build.props'
      - '**/scheduler-workflow.yml'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build
        run: dotnet build -c Release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        working-directory: src/NuGetTrends.Scheduler/

      - name: Publish
        run: dotnet publish -c Release -o publish --no-build
        working-directory: src/NuGetTrends.Scheduler/

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          context: ./src/NuGetTrends.Scheduler
          containerfiles: ./src/NuGetTrends.Scheduler/Dockerfile
          # oci: true

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: ./
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust
      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
